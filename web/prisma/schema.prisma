// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  passwordHash String   @unique
  createdAt    DateTime @default(now())
}

enum UserType {
  INACTIVE
  ACTIVE
  BANNED
}

enum EducationLevel {
  SEC
  JC
  POLY
  UNI
}

enum YearOfStudy {
  S1
  S2
  S3
  S4
  S5
  J1
  J2
  P1
  P2
  P3
  U1
  U2
  U3
  U4
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  passwordHash String

  eduLevel     EducationLevel
  yearOfStudy  YearOfStudy
  gender       Gender
  preferredTiming String 
  preferredLocations String
  currentCourse String?
  relevantSubjects String? 
  school       String?  
  academicGrades String?
  usualStudyPeriod String? //to store as eg. "16:00-18:00"
  emailReminder Boolean @default(true)

  createdAt    DateTime @default(now())
  warning      Boolean  @default(false)
  status       UserType @default(INACTIVE)

  hostedGroups   Group[]        @relation("GroupHost")

  memberships GroupMember[]
  sentInvites   Invitation[]  @relation("SentInvites")
  receivedInvites Invitation[] @relation("ReceivedInvites")
  notifications Notification[]

  reports Report[] 
  verificationToken VerificationToken?
  
  // Chat relations
  chatsAsUser1  Chat[]    @relation("User1Chats")
  chatsAsUser2  Chat[]    @relation("User2Chats")
  sentMessages  Message[] @relation("SentMessages")
}

model VerificationToken { //assign token to each user, delete when expires
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Group {
  id          String   @id @default(cuid())
  groupID     String   @unique   
  name        String
  //slug       String   @unique 
  visibility  Boolean
  start       DateTime
  end         DateTime
  location    String
  capacity    Int
  currentSize Int      @default(1)
  hostId      String
  host        User     @relation("GroupHost", fields: [hostId], references: [id], onDelete: Cascade)
  isClosed    Boolean  @default(false)
  createdAt   DateTime @default(now())

  members GroupMember[]
  invitations Invitation[]
  reports Report[]
  notifications Notification[]
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // a user can join a group only once
}

enum NotificationType {
  INVITE_RECEIVED
  INVITE_REJECTED
  GROUP_MEMBER_JOINED
  GROUP_MEMBER_LEFT
  GROUP_START_REMINDER
  WARNING
  GROUP_REPORTED
}

model Invitation {
  id         String            @id @default(cuid())
  senderId   String
  receiverId String
  groupId    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  sender     User   @relation("SentInvites",     fields: [senderId],   references: [id], onDelete: Cascade)
  receiver   User   @relation("ReceivedInvites", fields: [receiverId], references: [id], onDelete: Cascade)
  group      Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  notifications Notification[] @relation("InvitationNotifications")

  @@unique([receiverId, groupId])
}

model Notification {
  id         String            @id @default(cuid())
  userId     String
  groupId    String? //allow null
  type       NotificationType
  message    String
  read       Boolean           @default(false)
  createdAt  DateTime          @default(now())

  //optional link to Invitation (to delete inbox entry when invite remove when accept or reject)
  invitationId String? 
  invitation   Invitation?      @relation("InvitationNotifications", fields: [invitationId], references: [id], onDelete: Cascade)

  group        Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)

  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id         String  @id @default(cuid())
  groupId    String
  userId     String 
  types      Json //store in JSON array for multiple tags ["VULGARITIES, SEXUAL_CONTENT, HARASSMENT, HARMFUL_ACTS, SPAM, MISINFORMATION]
  createdAt  DateTime @default(now())

  group     Group       @relation(fields: [groupId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

// NEW: Chat model for organizing conversations
model Chat {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  
  user1     User     @relation("User1Chats", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("User2Chats", fields: [user2Id], references: [id], onDelete: Cascade)
  
  messages  Message[]
  
  @@unique([user1Id, user2Id])
}

// UPDATED: Message model now linked to Chat
model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}