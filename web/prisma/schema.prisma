// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  passwordHash String   @unique
  createdAt    DateTime @default(now())
}

enum UserType {
  ACTIVE
  BANNED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  eduLevel     String?
  createdAt    DateTime @default(now())
  warning      Boolean  @default(false)
  status       UserType @default(BANNED)

  memberships GroupMember[]
  sentInvites   Invitation[]  @relation("SentInvites")
  receivedInvites Invitation[] @relation("ReceivedInvites")
  notifications Notification[]

  reports Report[] 
}

model Group {
  id          String   @id @default(cuid())
  groupID     String   @unique   
  name        String
  //slug       String   @unique 
  visibility  Boolean
  start       DateTime
  end         DateTime
  location    String
  capacity    Int
  currentSize Int      @default(1)
  hostId      String
  isClosed    Boolean  @default(false)
  createdAt   DateTime @default(now())

  members GroupMember[]
  invitations Invitation[]
  reports Report[]
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // a user can join a group only once
}

enum NotificationType {
  INVITE_RECEIVED
  INVITE_REJECTED
  INVITE_EXPIRED
  GROUP_MEMBER_JOINED
  GROUP_MEMBER_LEFT
  GROUP_START_REMINDER
  WARNING
  GROUP_REPORTED
}

model Invitation {
  id         String            @id @default(cuid())
  senderId   String
  receiverId String
  groupId    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  sender     User   @relation("SentInvites",     fields: [senderId],   references: [id], onDelete: Cascade)
  receiver   User   @relation("ReceivedInvites", fields: [receiverId], references: [id], onDelete: Cascade)
  group      Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  notifications Notification[] @relation("InvitationNotifications")

  @@unique([receiverId, groupId])
}

model Notification {
  id         String            @id @default(cuid())
  userId     String
  type       NotificationType
  message    String
  read       Boolean           @default(false)
  createdAt  DateTime          @default(now())

  //optional link to Invitation (to delete inbox entry when invite remove when accept or reject)
  invitationId String? 
  invitation   Invitation?      @relation("InvitationNotifications", fields: [invitationId], references: [id], onDelete: Cascade)

  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id         String  @id @default(cuid())
  groupId    String
  userId     String 
  types      Json //store in JSON array for multiple tags ["VULGARITIES, SEXUAL_CONTENT, HARASSMENT, HARMFUL_ACTS, SPAM, MISINFORMATION]
  createdAt  DateTime @default(now())

  group     Group       @relation(fields: [groupId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}